name: Image Generator Module

on:
  workflow_call:

jobs:
  generate-image:
    runs-on: ubuntu-latest
    
    outputs:
      image-url: ${{ steps.generate.outputs.image-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Claude Code SDK
      run: npm install @anthropic-ai/claude-code
        
    - name: Generate Morning Image
      id: generate
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        QWEN_IMAGE: ${{ secrets.QWEN_IMAGE }}
      run: |
        # QWEN_IMAGE URLの確認
        if [ -z "$QWEN_IMAGE" ]; then
          echo "::error::QWEN_IMAGE is not set in GitHub Secrets"
          exit 1
        fi
        echo "✅ QWEN_IMAGE URL is configured"
        
        # MCP設定を作成
        echo '{
          "mcpServers": {
            "t2i-kamui-qwen-image": {
              "type": "http",
              "url": "'${QWEN_IMAGE}'",
              "description": "Qwen-Image Text-to-Image via Kamui Code"
            }
          }
        }' > mcp-config.json
        
        # 画像生成リトライループ（最大3回）
        SUCCESS=false
        for RETRY_COUNT in {1..3}; do
          echo "🔄 画像生成試行 $RETRY_COUNT/3"
          
          # scene.ymlファイルを読み込み
          SCENE_DATA=$(cat yml/scene.yml)
          echo "📋 scene.ymlファイルを読み込みました"
          
          # Claude Code SDKでシチュエーション、表情、ポーズ、カメラを生成
          PROMPT="yml/scene.ymlのキャラクター設定を使って、アニメスタイルの高品質デジタルアートを生成してください。まずReadツールでyml/scene.ymlファイルを読み込んで、そのキャラクター設定を理解してください。その上で、以下の手順で創意工夫して画像を生成してください：1.まず魅力的なシチュエーション（場所・時間・環境・状況）をランダムに決定、2.そのシチュエーションに最も適した表情を選択（例：教室なら集中、公園なら楽しそう、図書館なら静か、お祭りならわくわく）、3.シチュエーションと表情に合う自然なポーズを選択（例：本を読んでいるなら座って本を持つ、走っているなら動的なポーズ）、4.シチュエーションを最も魅力的に見せるカメラアングルを選択（例：ジャンプなら少し下から、読書ならクローズアップ）、5.シチュエーションに合った詳細な背景を描画（例：教室なら黒板・机・窓、公園なら緑・ベンチ・青空、図書館なら本棚・静かな雰囲気）。キャラクターはscene.ymlの設定通り（アニメ女子高生のツインテール、セーラー服、三毛猫の相棒）で、アニメ/マンガ風の高品質デジタルアート、アスペクト比は正方形(square)で生成してください。**重要**: 生成完了後、必ず画像のURLを明確に表示してください（例：https://example.com/image.png）。"
          
          echo "🤖 Claude Code SDK実行開始"
          
          # Claude Code SDKの実行
          IMAGE_RESULT=$(timeout 180 npx @anthropic-ai/claude-code \
            --mcp-config="$(pwd)/mcp-config.json" \
            --allowedTools "Read,mcp__t2i-kamui-qwen-image" \
            --max-turns 8 \
            --permission-mode "acceptEdits" \
            --print \
            "$PROMPT" 2>&1) || {
                CLAUDE_EXIT_CODE=$?
                echo "::error::❌ Claude Code実行失敗 (exit code: $CLAUDE_EXIT_CODE)"
                if [ $CLAUDE_EXIT_CODE -eq 124 ]; then
                  echo "::error::❌ タイムアウトしました (3分)"
                fi
                IMAGE_RESULT=""
              }
          
          echo "🎨 画像生成結果:"
          echo "$IMAGE_RESULT"
          
          # 結果からURLを抽出（複数パターン）
          IMAGE_URL=""
          
          # パターン1: https://で始まる画像URL
          IMAGE_URL=$(echo "$IMAGE_RESULT" | grep -oP 'https://[^\s`"]+\.(png|jpg|jpeg|webp)' | head -1)
          
          # パターン2: リクエストIDから画像URLを推定
          if [ -z "$IMAGE_URL" ]; then
            REQUEST_ID=$(echo "$IMAGE_RESULT" | grep -oP 'リクエストID\s*`?([a-f0-9-]+)`?' | sed 's/.*`\?\([a-f0-9-]\+\)`\?.*/\1/')
            if [ ! -z "$REQUEST_ID" ]; then
              echo "🔍 リクエストID検出: $REQUEST_ID"
              # Kamui Code APIから結果を取得する処理を追加する可能性
            fi
          fi
          
          # パターン3: MCP出力から直接URL取得を試行
          if [ -z "$IMAGE_URL" ]; then
            echo "🔄 MCPから直接画像URL取得を試行..."
            MCP_RESULT=$(timeout 60 npx @anthropic-ai/claude-code \
              --mcp-config="$(pwd)/mcp-config.json" \
              --allowedTools "mcp__t2i-kamui-qwen-image" \
              --max-turns 3 \
              --permission-mode "acceptEdits" \
              --print \
              "前回の画像生成結果から画像URLを取得してください。リクエストIDがある場合は結果確認してください。" 2>&1)
            
            IMAGE_URL=$(echo "$MCP_RESULT" | grep -oP 'https://[^\s`"]+\.(png|jpg|jpeg|webp)' | head -1)
          fi
          
          echo "🔍 URL抽出結果: '$IMAGE_URL'"
          
          # 画像URL取得チェック
          if [ ! -z "$IMAGE_URL" ] && [[ "$IMAGE_URL" =~ ^https:// ]]; then
            echo "✅ 画像URLを取得成功: $IMAGE_URL"
            SUCCESS=true
            break
          fi
          
          echo "::warning::⚠️ 画像生成失敗（試行 $RETRY_COUNT/3）"
          
          if [ $RETRY_COUNT -lt 3 ]; then
            echo "🔄 5秒後に再試行します..."
            sleep 5
          fi
        done
        
        # 最終結果チェック
        if [ "$SUCCESS" != "true" ]; then
          echo "::error::❌ 画像生成に3回失敗しました"
          exit 1
        fi
        
        echo "✅ 画像URL取得完了: $IMAGE_URL"
        
        # アウトプットとして設定
        echo "image-url=$IMAGE_URL" >> $GITHUB_OUTPUT
        
        echo "✅ Image generation completed"
        
    - name: Display Image Result
      run: |
        echo "🖼️ Generated image: ${{ steps.generate.outputs.image-url }}"