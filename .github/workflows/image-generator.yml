name: Image Generator Module

on:
  workflow_call:

jobs:
  generate-image:
    runs-on: ubuntu-latest
    
    outputs:
      image-url: ${{ steps.generate.outputs.image-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Claude Code SDK
      run: npm install @anthropic-ai/claude-code
        
    - name: Generate Morning Image
      id: generate
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        QWEN_IMAGE: ${{ secrets.QWEN_IMAGE }}
      run: |
        # QWEN_IMAGE URLの確認
        if [ -z "$QWEN_IMAGE" ]; then
          echo "::error::QWEN_IMAGE is not set in GitHub Secrets"
          exit 1
        fi
        echo "✅ QWEN_IMAGE URL is configured"
        
        # MCP設定を作成
        echo '{
          "mcpServers": {
            "t2i-kamui-qwen-image": {
              "type": "http",
              "url": "'${QWEN_IMAGE}'",
              "description": "Qwen-Image Text-to-Image via Kamui Code"
            }
          }
        }' > mcp-config.json
        
        # 画像生成リトライループ（最大3回）
        SUCCESS=false
        for RETRY_COUNT in {1..3}; do
          echo "🔄 画像生成試行 $RETRY_COUNT/3"
          
          PROMPT="美しい朝の風景画像を生成してください。日の出、平和で暖かい雰囲気、柔らかい光、自然の風景、落ち着いた色合いで。アスペクト比は正方形(square)で、ファイル名はmorning-image.pngとして現在のディレクトリに保存してください。"
          
          echo "🤖 Claude Code SDK実行開始"
          
          # Claude Code SDKの実行
          IMAGE_RESULT=$(timeout 180 npx @anthropic-ai/claude-code \
            --mcp-config="$(pwd)/mcp-config.json" \
            --allowedTools "mcp__t2i-kamui-qwen-image" \
            --max-turns 8 \
            --permission-mode "acceptEdits" \
            --print \
            "$PROMPT" 2>&1) || {
                CLAUDE_EXIT_CODE=$?
                echo "::error::❌ Claude Code実行失敗 (exit code: $CLAUDE_EXIT_CODE)"
                if [ $CLAUDE_EXIT_CODE -eq 124 ]; then
                  echo "::error::❌ タイムアウトしました (3分)"
                fi
                IMAGE_RESULT=""
              }
          
          echo "🎨 画像生成結果:"
          echo "$IMAGE_RESULT"
          
          # 結果からURLを抽出
          IMAGE_URL=$(echo "$IMAGE_RESULT" | grep -oP 'https://[^\s]+\.(png|jpg|jpeg|webp)' | head -1)
          
          # ダウンロードされたファイルを検索
          DOWNLOADED_FILE=""
          
          # パターン1: morning-image.*
          DOWNLOADED_FILE=$(find . -name "morning-image.*" -type f 2>/dev/null | head -1)
          
          # パターン2: 最近作成された画像ファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.webp" -type f -mmin -5 2>/dev/null | head -1)
          fi
          
          echo "🔍 URL抽出結果: '$IMAGE_URL'"
          echo "📁 ダウンロードされたファイル: '$DOWNLOADED_FILE'"
          
          # ファイル処理
          if [ ! -z "$DOWNLOADED_FILE" ] && [ -s "$DOWNLOADED_FILE" ]; then
            echo "✅ 既にダウンロードされたファイルを使用: $DOWNLOADED_FILE"
            
            FILE_SIZE=$(stat -c%s "$DOWNLOADED_FILE")
            FILE_TYPE=$(file "$DOWNLOADED_FILE")
            
            # 画像ファイルかチェック
            if echo "$FILE_TYPE" | grep -qE "(image|PNG|JPEG|WebP)" && [ $FILE_SIZE -gt 1000 ]; then
              echo "✅ 有効な画像ファイルと判定"
              
              # morning-image.pngに変換/コピー
              if cp "$DOWNLOADED_FILE" "morning-image.png" 2>/dev/null; then
                echo "✅ 画像をmorning-image.pngに保存成功"
                SUCCESS=true
                break
              fi
            fi
          elif [ ! -z "$IMAGE_URL" ] && [[ "$IMAGE_URL" =~ ^https:// ]]; then
            echo "✅ HTTPS URLからダウンロードを試行: $IMAGE_URL"
            
            if curl -L "$IMAGE_URL" -o "morning-image.png" --max-time 60; then
              if [ -s "morning-image.png" ]; then
                FILE_SIZE=$(stat -c%s "morning-image.png")
                echo "📊 ダウンロードファイルサイズ: ${FILE_SIZE} bytes"
                
                if [ $FILE_SIZE -gt 1000 ]; then
                  echo "✅ 有効な画像ファイルをダウンロード"
                  SUCCESS=true
                  break
                fi
              fi
            fi
          fi
          
          echo "::warning::⚠️ 画像生成失敗（試行 $RETRY_COUNT/3）"
          
          # ファイルをクリーンアップ
          rm -f morning-image.png *.png 2>/dev/null || true
          
          if [ $RETRY_COUNT -lt 3 ]; then
            echo "🔄 5秒後に再試行します..."
            sleep 5
          fi
        done
        
        # 最終結果チェック
        if [ "$SUCCESS" != "true" ]; then
          echo "::error::❌ 画像生成に3回失敗しました"
          exit 1
        fi
        
        # 最終ファイルチェック
        if [ -f "morning-image.png" ] && [ -s "morning-image.png" ]; then
          FINAL_SIZE=$(stat -c%s "morning-image.png")
          echo "✅ 最終画像ファイル生成完了 (${FINAL_SIZE} bytes)"
        else
          echo "::error::❌ 最終画像ファイルの生成に失敗しました"
          exit 1
        fi
        
        # アウトプットとして設定
        if [ ! -z "$IMAGE_URL" ]; then
          echo "image-url=$IMAGE_URL" >> $GITHUB_OUTPUT
        else
          echo "image-url=file://$(pwd)/morning-image.png" >> $GITHUB_OUTPUT
        fi
        
        echo "✅ Image generation completed"
        
    - name: Display Image Result
      run: |
        echo "🖼️ Generated image: ${{ steps.generate.outputs.image-url }}"