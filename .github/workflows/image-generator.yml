name: Image Generator Module

on:
  workflow_call:
    outputs:
      image-url:
        value: ${{ jobs.generate-image.outputs.url }}
      image-file:
        value: ${{ jobs.generate-image.outputs.file }}

jobs:
  generate-image:
    runs-on: ubuntu-latest
    
    outputs:
      url: ${{ steps.generate.outputs.image-url }}
      file: ${{ steps.generate.outputs.image-file }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Claude Code SDK
      run: |
        echo "📦 Claude Code SDKインストール"
        npm install @anthropic-ai/claude-code --force 2>/dev/null || echo "⚠️ インストールエラーを無視して続行"
        
    - name: Generate Morning Image
      id: generate
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        QWEN_IMAGE: ${{ secrets.QWEN_IMAGE }}
      run: |
        # QWEN_IMAGE URLの確認
        if [ -z "$QWEN_IMAGE" ]; then
          echo "::error::QWEN_IMAGE is not set in GitHub Secrets"
          exit 1
        fi
        echo "✅ QWEN_IMAGE URL is configured"
        
        # MCP設定を作成
        echo '{
          "mcpServers": {
            "t2i-kamui-qwen-image": {
              "type": "http",
              "url": "'${QWEN_IMAGE}'",
              "description": "Qwen-Image Text-to-Image via Kamui Code"
            }
          }
        }' > mcp-config.json
        
        # 画像生成リトライループ（最大3回）
        SUCCESS=false
        for RETRY_COUNT in {1..3}; do
          echo "🔄 画像生成試行 $RETRY_COUNT/3"
          
          # scene.ymlファイルを読み込み
          SCENE_DATA=$(cat yml/scene.yml)
          echo "📋 scene.ymlファイルを読み込みました"
          
          # scene.ymlファイルの読み込み確認
          if [ ! -f "yml/scene.yml" ]; then
            echo "::error::scene.ymlファイルが見つかりません: yml/scene.yml"
            exit 1
          fi
          echo "✅ scene.ymlファイルを確認しました"
          
          # scene.ymlからプロンプト構築
          if [ -f "yml/scene.yml" ]; then
            SCENE_CONTENT=$(cat yml/scene.yml)
            echo "📝 scene.yml内容を読み込みました"
          else
            echo "::error::scene.ymlが見つかりません"
            exit 1
          fi
          
          # 動的シチュエーション生成プロンプト
          FULL_PROMPT="yml/scene.ymlの設定を読んで理解してください。その上で、毎回異なる創造的なシチュエーションを考えて画像を生成してください。シチュエーション例：教室で勉強/屋上で弁当/公園で散歩/図書館で読書/海辺で遊ぶ/桜の下でピクニック/夏祭りで屋台巡り/雪景色で雪だるま作り等。それぞれのシチュエーションに適した表情・ポーズ・背景を選んでください。キャラクター：ツインテール女子高生（セーラー服）と三毛猫。スタイル：アニメ/マンガ風。アスペクト比1:1、ファイル名morning-image.png、Qwen-Imageツールで生成保存してください。"
          
          echo "🤖 Claude Code SDK実行開始"
          
          # Claude Code SDKの実行（RADIO-workflowスタイル）
          echo "🚀 Starting Morning Image Generation..."
          echo "📝 Prompt length: ${#FULL_PROMPT}"
          echo "📋 Environment Check:"
          echo "Working directory: $(pwd)"
          echo "QWEN_IMAGE URL configured: Yes"
          
          echo "🎯 Claude Code SDK実行中（180秒タイムアウト）..."
          IMAGE_RESULT=$(timeout 180 npx @anthropic-ai/claude-code \
            --mcp-config="$(pwd)/mcp-config.json" \
            --allowedTools "Read,mcp__t2i-kamui-qwen-image" \
            --max-turns 12 \
            --permission-mode "bypassPermissions" \
            --print \
            --verbose \
            "$FULL_PROMPT" 2>&1) || {
                CLAUDE_EXIT_CODE=$?
                echo "::error::❌ Claude Code実行失敗 (exit code: $CLAUDE_EXIT_CODE)"
                if [ $CLAUDE_EXIT_CODE -eq 124 ]; then
                  echo "::error::❌ タイムアウトしました (3分)"
                fi
                echo "::error::詳細なエラー出力:"
                echo "$IMAGE_RESULT" | head -50
                echo "::error::環境変数確認:"
                echo "CLAUDE_CODE_OAUTH_TOKEN: ${CLAUDE_CODE_OAUTH_TOKEN:0:20}..."
                IMAGE_RESULT=""
              }
          
          echo "🎨 画像生成結果 (詳細ログ):"
          echo "--- Claude Code 実行ログ (開始) ---"
          echo "$IMAGE_RESULT"
          echo "--- Claude Code 実行ログ (終了) ---"
          echo ""
          
          # 結果からURLまたはファイル名を抽出
          IMAGE_URL=$(echo "$IMAGE_RESULT" | grep -oP '(https://|gs://)[^\s]+\.(png|jpg|jpeg|webp)' | head -1)
          
          # Claude Codeの出力からファイル名を抽出（複数パターン）
          CLAUDE_FILE=""
          
          # パターンA: バッククォートで囲まれたファイル名
          CLAUDE_FILE=$(echo "$IMAGE_RESULT" | grep -oP '`[^`]+\.(png|jpg|jpeg|webp)`' | sed 's/`//g' | head -1)
          
          # パターンB: 「ファイル名**: 」形式
          if [ -z "$CLAUDE_FILE" ]; then
            CLAUDE_FILE=$(echo "$IMAGE_RESULT" | grep -oP '\*\*ファイル名\*\*[:\s]*[^0-9\s]*[a-zA-Z0-9_]+\.(png|jpg|jpeg|webp)' | sed 's/\*\*ファイル名\*\*[:\s]*//' | head -1)
          fi
          
          # パターンC: 「画像は」で始まる行からファイル名抽出
          if [ -z "$CLAUDE_FILE" ]; then
            CLAUDE_FILE=$(echo "$IMAGE_RESULT" | grep -oP '画像は[^/]*([/][^/\s]*)*[a-zA-Z0-9_]+\.(png|jpg|jpeg|webp)' | grep -oP '[a-zA-Z0-9_]+\.(png|jpg|jpeg|webp)' | head -1)
          fi
          
          # パターンD: 「ファイル名「」として保存」形式
          if [ -z "$CLAUDE_FILE" ]; then
            CLAUDE_FILE=$(echo "$IMAGE_RESULT" | grep -oP 'ファイル名「[^」]+\.(png|jpg|jpeg|webp)」として保存' | grep -oP '[^「]+\.(png|jpg|jpeg|webp)' | head -1)
          fi
          
          # パターンE: morning-image.pngファイル名を直接検索
          if [ -z "$CLAUDE_FILE" ]; then
            CLAUDE_FILE=$(echo "$IMAGE_RESULT" | grep -oP '[A-Za-z_]*morning-image[a-zA-Z0-9_]*\.(png|jpg|jpeg|webp)' | head -1)
          fi
          
          # ファイル名の前後の空白を除去
          CLAUDE_FILE=$(echo "$CLAUDE_FILE" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          
          if [ ! -z "$CLAUDE_FILE" ]; then
            echo "✅ Claude Codeの出力からファイル名を検出: $CLAUDE_FILE"
          else
            echo "⚠️ Claude Codeの出力からファイル名を検出できませんでした"
          fi
          echo "🔍 デバッグ: CLAUDE_FILE='$CLAUDE_FILE'"
          IMAGE_FILE="morning-image.png"
          
          # 直接ダウンロードされたファイルを検索
          echo "🔍 生成されたファイルを検索中..."
          ls -la || true
          
          # 複数のパターンでファイルを検索
          DOWNLOADED_FILE=""
          
          # パターン0: Claude Codeが明示的に出力したファイル名
          echo "🔍 パターン0チェック: CLAUDE_FILE='$CLAUDE_FILE'"
          if [ ! -z "$CLAUDE_FILE" ]; then
            echo "🔍 CLAUDE_FILEが設定されています - ファイル存在チェック"
            if [ -f "$CLAUDE_FILE" ]; then
              DOWNLOADED_FILE="$CLAUDE_FILE"
              echo "✅ パターン0（Claude出力）で発見: $DOWNLOADED_FILE"
            else
              echo "⚠️ パターン0: 直接パスでファイルが存在しません: $CLAUDE_FILE"
              # 絶対パスの場合、複数の方法でアクセス試行
              if [[ "$CLAUDE_FILE" == /* ]]; then
                echo "🔍 絶対パス検出 - 複数の方法でアクセス試行"
                BASENAME_FILE=$(basename "$CLAUDE_FILE")
                echo "🔍 ファイル名: $BASENAME_FILE"
                
                # 方法1: 直接アクセス
                if [ -f "$CLAUDE_FILE" ]; then
                  echo "✅ 直接アクセスでファイル発見: $CLAUDE_FILE"
                  if cp "$CLAUDE_FILE" "./$BASENAME_FILE" 2>/dev/null; then
                    DOWNLOADED_FILE="./$BASENAME_FILE"
                    echo "✅ 直接アクセスでワーキングディレクトリにコピー完了: $DOWNLOADED_FILE"
                  fi
                fi
                
                # 方法2: sudoでアクセス
                if [ -z "$DOWNLOADED_FILE" ] && sudo test -f "$CLAUDE_FILE" 2>/dev/null; then
                  echo "✅ sudo権限で絶対パスファイル発見: $CLAUDE_FILE"
                  if sudo cp "$CLAUDE_FILE" "./$BASENAME_FILE" 2>/dev/null; then
                    sudo chown runner:docker "./$BASENAME_FILE" 2>/dev/null || true
                    DOWNLOADED_FILE="./$BASENAME_FILE"
                    echo "✅ sudo権限で絶対パスからワーキングディレクトリにコピー完了: $DOWNLOADED_FILE"
                  else
                    echo "::warning::⚠️ sudoでもファイルコピーに失敗"
                  fi
                fi
                
                # 方法3: パス内検索
                if [ -z "$DOWNLOADED_FILE" ]; then
                  echo "🔍 ファイルシステム内で morning-image.png を検索中..."
                  FOUND_FILE=$(find /home -name "morning-image.png" -type f 2>/dev/null | head -1)
                  if [ ! -z "$FOUND_FILE" ]; then
                    echo "✅ ファイルシステム検索で発見: $FOUND_FILE"
                    if cp "$FOUND_FILE" "./$BASENAME_FILE" 2>/dev/null || sudo cp "$FOUND_FILE" "./$BASENAME_FILE" 2>/dev/null; then
                      sudo chown runner:docker "./$BASENAME_FILE" 2>/dev/null || true
                      DOWNLOADED_FILE="./$BASENAME_FILE"
                      echo "✅ ファイルシステム検索からコピー完了: $DOWNLOADED_FILE"
                    fi
                  else
                    echo "⚠️ ファイルシステム検索でも見つかりませんでした"
                  fi
                fi
                
                if [ -z "$DOWNLOADED_FILE" ]; then
                  echo "::warning::⚠️ 全ての方法でファイルアクセスに失敗"
                  echo "::warning::デバッグ情報:"
                  echo "::warning::- pwd: $(pwd)"
                  echo "::warning::- ls /home/runner/work/ 内容:"
                  sudo ls -la /home/runner/work/ 2>/dev/null || echo "アクセスできません"
                  echo "::warning::- find結果:"
                  sudo find /home -name "*morning*" -type f 2>/dev/null | head -10 || echo "findでエラー"
                fi
              fi
            fi
          else
            echo "🔍 CLAUDE_FILEが空です"
          fi
          
          # パターン1: morning-imageで始まるファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "morning-image*.png" -o -name "morning-image*.jpg" -o -name "morning-image*.jpeg" -o -name "morning-image*.webp" -type f 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン1で発見: $DOWNLOADED_FILE"
          fi
          
          # パターン1.5: Claude Codeが指定した正確なファイル名
          if [ -z "$DOWNLOADED_FILE" ] && [ ! -z "$CLAUDE_FILE" ]; then
            BASENAME_FILE=$(basename "$CLAUDE_FILE")
            if [ -f "$BASENAME_FILE" ]; then
              DOWNLOADED_FILE="$BASENAME_FILE"
              echo "✅ パターン1.5で発見（正確なファイル名）: $DOWNLOADED_FILE"
            fi
          fi
          
          # パターン2: imageで始まるファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "image*.png" -o -name "image*.jpg" -o -name "image*.jpeg" -o -name "image*.webp" -type f 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン2で発見: $DOWNLOADED_FILE"
          fi
          
          # パターン3: 最近作成された画像ファイル（5分以内）
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.webp" -type f -mmin -5 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン3で発見: $DOWNLOADED_FILE"
          fi
          
          # パターン3.5: より広範囲のファイルシステム検索
          if [ -z "$DOWNLOADED_FILE" ]; then
            echo "🔍 より広範囲でファイル検索中..."
            FOUND_FILES=$(find /home -name "morning-image.png" -o -name "image.png" -type f 2>/dev/null | head -3)
            if [ ! -z "$FOUND_FILES" ]; then
              echo "✅ システム全体で発見:"
              echo "$FOUND_FILES"
              DOWNLOADED_FILE=$(echo "$FOUND_FILES" | head -1)
              echo "✅ パターン3.5で発見: $DOWNLOADED_FILE"
              # ワーキングディレクトリにコピー
              if cp "$DOWNLOADED_FILE" "./morning-image.png" 2>/dev/null || sudo cp "$DOWNLOADED_FILE" "./morning-image.png" 2>/dev/null; then
                sudo chown runner:docker "./morning-image.png" 2>/dev/null || true
                DOWNLOADED_FILE="./morning-image.png"
                echo "✅ ワーキングディレクトリにコピー完了: $DOWNLOADED_FILE"
              fi
            fi
          fi
          
          # パターン4: 任意の画像ファイル
          if [ -z "$DOWNLOADED_FILE" ]; then
            DOWNLOADED_FILE=$(find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.webp" -type f 2>/dev/null | head -1)
            [ ! -z "$DOWNLOADED_FILE" ] && echo "✅ パターン4で発見: $DOWNLOADED_FILE"
          fi
          
          echo "🔍 URL抽出結果: '$IMAGE_URL'"
          echo "📁 ダウンロードされたファイル: '$DOWNLOADED_FILE'"
          
          # ファイル処理（ダウンロード済みファイルを優先）
          if [ ! -z "$DOWNLOADED_FILE" ] && [ -s "$DOWNLOADED_FILE" ]; then
            echo "✅ 既にダウンロードされたファイルを使用: $DOWNLOADED_FILE"
            
            # 絶対パスの場合、ワーキングディレクトリにコピー
            if [[ "$DOWNLOADED_FILE" == /* ]]; then
              echo "🔍 絶対パス検出 - ワーキングディレクトリにコピー中"
              BASENAME_FILE=$(basename "$DOWNLOADED_FILE")
              if cp "$DOWNLOADED_FILE" "./$BASENAME_FILE" 2>/dev/null; then
                DOWNLOADED_FILE="./$BASENAME_FILE"
                echo "✅ 絶対パスからワーキングディレクトリにコピー完了: $DOWNLOADED_FILE"
              else
                echo "::warning::⚠️ ファイルコピーに失敗"
              fi
            fi
            
            FILE_SIZE=$(stat -c%s "$DOWNLOADED_FILE")
            echo "📊 ファイルサイズ: ${FILE_SIZE} bytes"
            
            # 画像ファイルの検証
            FILE_TYPE=$(file "$DOWNLOADED_FILE")
            echo "📄 ファイルタイプ: $FILE_TYPE"
            
            # 画像ファイルかチェック
            if echo "$FILE_TYPE" | grep -qE "(image|PNG|JPEG|WebP|data)" && [ $FILE_SIZE -gt 1000 ]; then
              echo "✅ 有効な画像ファイルと判定"
              
              # PNGに変換
              sudo apt-get update && sudo apt-get install -y imagemagick
              if convert "$DOWNLOADED_FILE" "morning-image.png" 2>/dev/null; then
                echo "✅ 画像をPNG形式に変換成功"
                echo "image-url=file://$(pwd)/$DOWNLOADED_FILE" >> $GITHUB_OUTPUT
                echo "image-file=morning-image.png" >> $GITHUB_OUTPUT
              else
                echo "::warning::⚠️ ImageMagick変換失敗、元ファイルを使用"
                cp "$DOWNLOADED_FILE" "morning-image.png"
                echo "image-url=file://$(pwd)/$DOWNLOADED_FILE" >> $GITHUB_OUTPUT
                echo "image-file=morning-image.png" >> $GITHUB_OUTPUT
              fi
            else
              echo "::warning::⚠️ ダウンロードされたファイルが画像ファイルではありません"
              echo "::warning::ファイルタイプ: $FILE_TYPE"
              echo "::warning::ファイルサイズ: ${FILE_SIZE} bytes"
              echo "::warning::ファイル内容（最初の500文字）:"
              head -c 500 "$DOWNLOADED_FILE" || true
              echo ""
              
              # XMLエラーレスポンスの場合、内容を表示
              if echo "$FILE_TYPE" | grep -qE "(XML|HTML|text)"; then
                echo "::warning::エラーレスポンス全体:"
                cat "$DOWNLOADED_FILE" | head -20
              fi
              
              # ファイルを削除
              rm -f "$DOWNLOADED_FILE"
              DOWNLOADED_FILE=""
            fi
          else
            echo "::warning::⚠️ ダウンロードされたファイルが見つかりません"
          fi
          
          # ダウンロードされたファイルが無効だった場合、URLからダウンロードを試みる
          if [ -z "$DOWNLOADED_FILE" ] || [ ! -f "morning-image.png" ]; then
            if [ ! -z "$IMAGE_URL" ] && [[ "$IMAGE_URL" =~ ^https:// ]]; then
              echo "✅ HTTPS URLからダウンロードを試行: $IMAGE_URL"
              
              # ダウンロードとファイルチェック
              if curl -L "$IMAGE_URL" -o "$IMAGE_FILE" --max-time 60; then
                if [ -s "$IMAGE_FILE" ]; then
                  FILE_SIZE=$(stat -c%s "$IMAGE_FILE")
                  FILE_TYPE=$(file "$IMAGE_FILE")
                  echo "📊 ダウンロードファイルサイズ: ${FILE_SIZE} bytes"
                  echo "📄 ファイルタイプ: $FILE_TYPE"
                  
                  # 画像ファイルかチェック
                  if echo "$FILE_TYPE" | grep -qE "(image|PNG|JPEG|WebP|data)" && [ $FILE_SIZE -gt 1000 ]; then
                    echo "✅ 有効な画像ファイルをダウンロード"
                    
                    # PNGに変換
                    sudo apt-get update && sudo apt-get install -y imagemagick
                    if convert "$IMAGE_FILE" "morning-image.png" 2>/dev/null; then
                      echo "✅ 画像をPNG形式に変換成功"
                      echo "image-url=$IMAGE_URL" >> $GITHUB_OUTPUT
                      echo "image-file=morning-image.png" >> $GITHUB_OUTPUT
                    else
                      echo "::warning::⚠️ ImageMagick変換失敗、元ファイルを使用"
                      mv "$IMAGE_FILE" "morning-image.png"
                      echo "image-url=$IMAGE_URL" >> $GITHUB_OUTPUT
                      echo "image-file=morning-image.png" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "::warning::⚠️ ダウンロードしたファイルが画像ファイルではありません"
                    echo "::warning::ファイル内容（最初の500文字）:"
                    head -c 500 "$IMAGE_FILE" || true
                    rm -f "$IMAGE_FILE"
                  fi
                else
                  echo "::warning::⚠️ ダウンロードされたファイルが空です"
                fi
              else
                echo "::warning::⚠️ 画像ファイルのダウンロードに失敗しました"
              fi
            else
              echo "::warning::⚠️ 有効なURLが見つかりません"
            fi
          fi
          
          # 画像生成成功チェック
          if [ -f "morning-image.png" ] && [ -s "morning-image.png" ]; then
            echo "✅ 画像生成成功（試行 $RETRY_COUNT/3）"
            SUCCESS=true
            break
          else
            echo "::warning::⚠️ 画像生成失敗（試行 $RETRY_COUNT/3）"
            echo "::warning::詳細なエラーログ:"
            echo "::warning::Claude Code実行結果: $IMAGE_RESULT"
            echo "::warning::抽出されたURL: '$IMAGE_URL'"
            echo "::warning::ダウンロードされたファイル: '$DOWNLOADED_FILE'"
            
            # ファイルをクリーンアップ
            rm -f morning-image.png image*.png *.png 2>/dev/null || true
            
            if [ $RETRY_COUNT -lt 3 ]; then
              echo "🔄 30秒後に再試行します..."
              sleep 30
            fi
          fi
        done
        
        # 最終結果チェック
        if [ "$SUCCESS" != "true" ]; then
          echo "::error::❌ 画像生成に3回失敗しました"
          echo "::error::現在のディレクトリ内容:"
          ls -la || true
          echo "::error::MCP設定ファイル確認:"
          if [ -f "mcp-config.json" ]; then
            echo "::error::MCP設定ファイルが存在します: mcp-config.json"
            head -20 "mcp-config.json" || true
          else
            echo "::error::MCP設定ファイルが見つかりません: mcp-config.json"
          fi
          exit 1
        fi
        
        # 最終ファイルチェック
        if [ -f "morning-image.png" ] && [ -s "morning-image.png" ]; then
          FINAL_SIZE=$(stat -c%s "morning-image.png")
          echo "✅ 最終画像ファイル生成完了 (${FINAL_SIZE} bytes)"
        else
          echo "::error::❌ 最終画像ファイルの生成に失敗しました"
          exit 1
        fi
        
    - name: Upload Image artifact
      uses: actions/upload-artifact@v4
      with:
        name: morning-image
        path: morning-image.png
        retention-days: 1